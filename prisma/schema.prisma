generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id            String    @id @default(uuid())
  recordingId   String
  userName      String
  text          String
  timestamp     Float?
  chapterIndex  Int?
  parentId      String?
  createdAt     DateTime  @default(now())
  parent        Comment?  @relation("CommentThread", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentThread")
  recording     Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)

  @@index([chapterIndex])
  @@index([parentId])
  @@index([recordingId])
  @@index([timestamp])
}

model Reaction {
  id           String   @id @default(uuid())
  recordingId  String
  chapterIndex Int
  emoji        String
  userName     String?
  createdAt    DateTime @default(now())

  @@index([recordingId, chapterIndex])
  @@index([recordingId])
}

model Recording {
  id           String      @id @default(uuid())
  name         String?
  createdAt    DateTime    @default(now())
  audioUrl     String
  status       String      @default("pending")
  lastPlayedAt DateTime?
  playCount    Int         @default(0)
  comments     Comment[]
  transcript   Transcript?
}

model Transcript {
  id             String    @id @default(uuid())
  recordingId    String    @unique
  fullText       String
  wordTimestamps Json
  chapters       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  recording      Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)
}
